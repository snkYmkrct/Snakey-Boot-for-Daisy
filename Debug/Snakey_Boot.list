
Snakey_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  08003868  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  08003868  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a987  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ac9  00000000  00000000  0002aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000880  00000000  00000000  0002c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000064e  00000000  00000000  0002cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035793  00000000  00000000  0002d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000c408  00000000  00000000  00062b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152454  00000000  00000000  0006ef41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002104  00000000  00000000  001c1398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  001c349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003828 	.word	0x08003828

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003828 	.word	0x08003828

080002d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MX_GPIO_Init+0xa0>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a20      	ldr	r2, [pc, #128]	; (8000378 <MX_GPIO_Init+0xa0>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_GPIO_Init+0xa0>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_GPIO_Init+0xa0>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_GPIO_Init+0xa0>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0xa0>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0xa0>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2180      	movs	r1, #128	; 0x80
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <MX_GPIO_Init+0xa4>)
 800034e:	f000 fe1f 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000352:	2380      	movs	r3, #128	; 0x80
 8000354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0xa4>)
 800036a:	f000 fc61 	bl	8000c30 <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	58024400 	.word	0x58024400
 800037c:	58020800 	.word	0x58020800

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000386:	4b3a      	ldr	r3, [pc, #232]	; (8000470 <main+0xf0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038e:	2b00      	cmp	r3, #0
 8000390:	d11b      	bne.n	80003ca <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000392:	f3bf 8f4f 	dsb	sy
}
 8000396:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000398:	f3bf 8f6f 	isb	sy
}
 800039c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800039e:	4b34      	ldr	r3, [pc, #208]	; (8000470 <main+0xf0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ac:	f3bf 8f6f 	isb	sy
}
 80003b0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b2:	4b2f      	ldr	r3, [pc, #188]	; (8000470 <main+0xf0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a2e      	ldr	r2, [pc, #184]	; (8000470 <main+0xf0>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003be:	f3bf 8f4f 	dsb	sy
}
 80003c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c4:	f3bf 8f6f 	isb	sy
}
 80003c8:	e000      	b.n	80003cc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ca:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <main+0xf0>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d138      	bne.n	800044a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003d8:	4b25      	ldr	r3, [pc, #148]	; (8000470 <main+0xf0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e0:	f3bf 8f4f 	dsb	sy
}
 80003e4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <main+0xf0>)
 80003e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003ec:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	0b5b      	lsrs	r3, r3, #13
 80003f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003f6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	08db      	lsrs	r3, r3, #3
 80003fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000400:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	015a      	lsls	r2, r3, #5
 8000406:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000410:	4917      	ldr	r1, [pc, #92]	; (8000470 <main+0xf0>)
 8000412:	4313      	orrs	r3, r2
 8000414:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	1e5a      	subs	r2, r3, #1
 800041c:	607a      	str	r2, [r7, #4]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1ef      	bne.n	8000402 <main+0x82>
    } while(sets-- != 0U);
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	1e5a      	subs	r2, r3, #1
 8000426:	60ba      	str	r2, [r7, #8]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1e5      	bne.n	80003f8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
}
 8000430:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <main+0xf0>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <main+0xf0>)
 8000438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800043c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800043e:	f3bf 8f4f 	dsb	sy
}
 8000442:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000444:	f3bf 8f6f 	isb	sy
}
 8000448:	e000      	b.n	800044c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fa4a 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f812 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f7ff ff40 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000458:	f000 f87e 	bl	8000558 <MX_QUADSPI_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_7);
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <main+0xf4>)
 8000460:	f000 fdaf 	bl	8000fc2 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay */
 8000464:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000468:	f000 face 	bl	8000a08 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_7);
 800046c:	e7f6      	b.n	800045c <main+0xdc>
 800046e:	bf00      	nop
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	58020800 	.word	0x58020800

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09c      	sub	sp, #112	; 0x70
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000482:	224c      	movs	r2, #76	; 0x4c
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f003 f9a2 	bl	80037d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f003 f99c 	bl	80037d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000498:	2002      	movs	r0, #2
 800049a:	f000 fdad 	bl	8000ff8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800049e:	2300      	movs	r3, #0
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	4b28      	ldr	r3, [pc, #160]	; (8000544 <SystemClock_Config+0xcc>)
 80004a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a6:	4a27      	ldr	r2, [pc, #156]	; (8000544 <SystemClock_Config+0xcc>)
 80004a8:	f023 0301 	bic.w	r3, r3, #1
 80004ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <SystemClock_Config+0xcc>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <SystemClock_Config+0xd0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004c0:	4a21      	ldr	r2, [pc, #132]	; (8000548 <SystemClock_Config+0xd0>)
 80004c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <SystemClock_Config+0xd0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004d4:	bf00      	nop
 80004d6:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <SystemClock_Config+0xd0>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e2:	d1f8      	bne.n	80004d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e4:	2302      	movs	r3, #2
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ec:	2340      	movs	r3, #64	; 0x40
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fe71 	bl	80011e0 <HAL_RCC_OscConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000504:	f000 f822 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	233f      	movs	r3, #63	; 0x3f
 800050a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2101      	movs	r1, #1
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fab1 	bl	8001a94 <HAL_RCC_ClockConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000538:	f000 f808 	bl	800054c <Error_Handler>
  }
}
 800053c:	bf00      	nop
 800053e:	3770      	adds	r7, #112	; 0x70
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	58000400 	.word	0x58000400
 8000548:	58024800 	.word	0x58024800

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <MX_QUADSPI_Init+0x54>)
 8000560:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 8000564:	22ff      	movs	r2, #255	; 0xff
 8000566:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 800056a:	2201      	movs	r2, #1
 800056c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 8000576:	2201      	movs	r2, #1
 8000578:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_QUADSPI_Init+0x50>)
 8000594:	f000 fd6a 	bl	800106c <HAL_QSPI_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800059e:	f7ff ffd5 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2400002c 	.word	0x2400002c
 80005ac:	52005000 	.word	0x52005000

080005b0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0bc      	sub	sp, #240	; 0xf0
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	22c0      	movs	r2, #192	; 0xc0
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 f8fd 	bl	80037d0 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a43      	ldr	r2, [pc, #268]	; (80006e8 <HAL_QSPI_MspInit+0x138>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d17f      	bne.n	80006e0 <HAL_QSPI_MspInit+0x130>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80005e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005e4:	f04f 0300 	mov.w	r3, #0
 80005e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fd7d 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <HAL_QSPI_MspInit+0x54>
    {
      Error_Handler();
 8000600:	f7ff ffa4 	bl	800054c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000604:	4b39      	ldr	r3, [pc, #228]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 8000606:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800060a:	4a38      	ldr	r2, [pc, #224]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 800060c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000610:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000614:	4b35      	ldr	r3, [pc, #212]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 8000616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800061a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	4a30      	ldr	r2, [pc, #192]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 800062a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	4a29      	ldr	r2, [pc, #164]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <HAL_QSPI_MspInit+0x13c>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	f003 0320 	and.w	r3, r3, #32
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000676:	230a      	movs	r3, #10
 8000678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800067c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000680:	4619      	mov	r1, r3
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <HAL_QSPI_MspInit+0x140>)
 8000684:	f000 fad4 	bl	8000c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8000688:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800068c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006a2:	2309      	movs	r3, #9
 80006a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006ac:	4619      	mov	r1, r3
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <HAL_QSPI_MspInit+0x144>)
 80006b0:	f000 fabe 	bl	8000c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80006b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80006ce:	230a      	movs	r3, #10
 80006d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <HAL_QSPI_MspInit+0x144>)
 80006dc:	f000 faa8 	bl	8000c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80006e0:	bf00      	nop
 80006e2:	37f0      	adds	r7, #240	; 0xf0
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	52005000 	.word	0x52005000
 80006ec:	58024400 	.word	0x58024400
 80006f0:	58021800 	.word	0x58021800
 80006f4:	58021400 	.word	0x58021400

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_MspInit+0x30>)
 8000700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000704:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x30>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x30>)
 8000710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	58024400 	.word	0x58024400

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f926 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000784:	4b37      	ldr	r3, [pc, #220]	; (8000864 <SystemInit+0xe4>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078a:	4a36      	ldr	r2, [pc, #216]	; (8000864 <SystemInit+0xe4>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <SystemInit+0xe8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	2b06      	cmp	r3, #6
 800079e:	d807      	bhi.n	80007b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <SystemInit+0xe8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f023 030f 	bic.w	r3, r3, #15
 80007a8:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <SystemInit+0xe8>)
 80007aa:	f043 0307 	orr.w	r3, r3, #7
 80007ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <SystemInit+0xec>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a2d      	ldr	r2, [pc, #180]	; (800086c <SystemInit+0xec>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <SystemInit+0xec>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <SystemInit+0xec>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4929      	ldr	r1, [pc, #164]	; (800086c <SystemInit+0xec>)
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <SystemInit+0xf0>)
 80007ca:	4013      	ands	r3, r2
 80007cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <SystemInit+0xe8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d007      	beq.n	80007ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <SystemInit+0xe8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f023 030f 	bic.w	r3, r3, #15
 80007e2:	4a21      	ldr	r2, [pc, #132]	; (8000868 <SystemInit+0xe8>)
 80007e4:	f043 0307 	orr.w	r3, r3, #7
 80007e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <SystemInit+0xec>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <SystemInit+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <SystemInit+0xec>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <SystemInit+0xec>)
 80007fe:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <SystemInit+0xf4>)
 8000800:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <SystemInit+0xec>)
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <SystemInit+0xf8>)
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <SystemInit+0xec>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <SystemInit+0xfc>)
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <SystemInit+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <SystemInit+0xec>)
 8000816:	4a19      	ldr	r2, [pc, #100]	; (800087c <SystemInit+0xfc>)
 8000818:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <SystemInit+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <SystemInit+0xec>)
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <SystemInit+0xfc>)
 8000824:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <SystemInit+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <SystemInit+0xec>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <SystemInit+0xec>)
 8000832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000836:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <SystemInit+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <SystemInit+0x100>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <SystemInit+0x104>)
 8000844:	4013      	ands	r3, r2
 8000846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800084a:	d202      	bcs.n	8000852 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <SystemInit+0x108>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <SystemInit+0x10c>)
 8000854:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000858:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	52002000 	.word	0x52002000
 800086c:	58024400 	.word	0x58024400
 8000870:	eaf6ed7f 	.word	0xeaf6ed7f
 8000874:	02020200 	.word	0x02020200
 8000878:	01ff0000 	.word	0x01ff0000
 800087c:	01010280 	.word	0x01010280
 8000880:	5c001000 	.word	0x5c001000
 8000884:	ffff0000 	.word	0xffff0000
 8000888:	51008108 	.word	0x51008108
 800088c:	52004000 	.word	0x52004000

08000890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000894:	f7ff ff74 	bl	8000780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	; (80008d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	; (80008dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f002 ff8f 	bl	80037e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c2:	f7ff fd5d 	bl	8000380 <main>
  bx  lr
 80008c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008d0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008d4:	08003858 	.word	0x08003858
  ldr r2, =_sbss
 80008d8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008dc:	2400007c 	.word	0x2400007c

080008e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC3_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ea:	2003      	movs	r0, #3
 80008ec:	f000 f96e 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008f0:	f001 fa86 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 80008f4:	4602      	mov	r2, r0
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_Init+0x68>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	4913      	ldr	r1, [pc, #76]	; (8000950 <HAL_Init+0x6c>)
 8000902:	5ccb      	ldrb	r3, [r1, r3]
 8000904:	f003 031f 	and.w	r3, r3, #31
 8000908:	fa22 f303 	lsr.w	r3, r2, r3
 800090c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_Init+0x68>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <HAL_Init+0x6c>)
 8000918:	5cd3      	ldrb	r3, [r2, r3]
 800091a:	f003 031f 	and.w	r3, r3, #31
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fa22 f303 	lsr.w	r3, r2, r3
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <HAL_Init+0x70>)
 8000926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_Init+0x74>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f814 	bl	800095c <HAL_InitTick>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e002      	b.n	8000944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800093e:	f7ff fedb 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	58024400 	.word	0x58024400
 8000950:	08003840 	.word	0x08003840
 8000954:	24000004 	.word	0x24000004
 8000958:	24000000 	.word	0x24000000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_InitTick+0x60>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e021      	b.n	80009b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_InitTick+0x64>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_InitTick+0x60>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f945 	bl	8000c16 <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f91d 	bl	8000be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x68>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2400000c 	.word	0x2400000c
 80009c0:	24000000 	.word	0x24000000
 80009c4:	24000008 	.word	0x24000008

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2400000c 	.word	0x2400000c
 80009ec:	24000078 	.word	0x24000078

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	24000078 	.word	0x24000078

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff ffee 	bl	80009f0 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffde 	bl	80009f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2400000c 	.word	0x2400000c

08000a50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetREVID+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	0c1b      	lsrs	r3, r3, #16
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	5c001000 	.word	0x5c001000

08000a68 <__NVIC_SetPriorityGrouping>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	05fa0000 	.word	0x05fa0000

08000ab0 <__NVIC_GetPriorityGrouping>:
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_SetPriority>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff47 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff5e 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff90 	bl	8000b20 <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5f 	bl	8000acc <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffb2 	bl	8000b88 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c3e:	4b89      	ldr	r3, [pc, #548]	; (8000e64 <HAL_GPIO_Init+0x234>)
 8000c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c42:	e194      	b.n	8000f6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 8186 	beq.w	8000f68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d005      	beq.n	8000c74 <HAL_GPIO_Init+0x44>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d017      	beq.n	8000d12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d123      	bne.n	8000d66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	08da      	lsrs	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3208      	adds	r2, #8
 8000d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	691a      	ldr	r2, [r3, #16]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	69b9      	ldr	r1, [r7, #24]
 8000d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0203 	and.w	r2, r3, #3
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80e0 	beq.w	8000f68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_GPIO_Init+0x238>)
 8000daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dae:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <HAL_GPIO_Init+0x238>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_GPIO_Init+0x238>)
 8000dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <HAL_GPIO_Init+0x23c>)
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <HAL_GPIO_Init+0x240>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d052      	beq.n	8000e98 <HAL_GPIO_Init+0x268>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_GPIO_Init+0x244>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d031      	beq.n	8000e5e <HAL_GPIO_Init+0x22e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_GPIO_Init+0x248>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d02b      	beq.n	8000e5a <HAL_GPIO_Init+0x22a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <HAL_GPIO_Init+0x24c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d025      	beq.n	8000e56 <HAL_GPIO_Init+0x226>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <HAL_GPIO_Init+0x250>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d01f      	beq.n	8000e52 <HAL_GPIO_Init+0x222>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_GPIO_Init+0x254>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d019      	beq.n	8000e4e <HAL_GPIO_Init+0x21e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_GPIO_Init+0x258>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0x21a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <HAL_GPIO_Init+0x25c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00d      	beq.n	8000e46 <HAL_GPIO_Init+0x216>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <HAL_GPIO_Init+0x260>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0x212>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_GPIO_Init+0x264>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d101      	bne.n	8000e3e <HAL_GPIO_Init+0x20e>
 8000e3a:	2309      	movs	r3, #9
 8000e3c:	e02d      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e3e:	230a      	movs	r3, #10
 8000e40:	e02b      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e42:	2308      	movs	r3, #8
 8000e44:	e029      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e46:	2307      	movs	r3, #7
 8000e48:	e027      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e025      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e4e:	2305      	movs	r3, #5
 8000e50:	e023      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e021      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e01f      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e01d      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e01b      	b.n	8000e9a <HAL_GPIO_Init+0x26a>
 8000e62:	bf00      	nop
 8000e64:	58000080 	.word	0x58000080
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58000400 	.word	0x58000400
 8000e70:	58020000 	.word	0x58020000
 8000e74:	58020400 	.word	0x58020400
 8000e78:	58020800 	.word	0x58020800
 8000e7c:	58020c00 	.word	0x58020c00
 8000e80:	58021000 	.word	0x58021000
 8000e84:	58021400 	.word	0x58021400
 8000e88:	58021800 	.word	0x58021800
 8000e8c:	58021c00 	.word	0x58021c00
 8000e90:	58022000 	.word	0x58022000
 8000e94:	58022400 	.word	0x58022400
 8000e98:	2300      	movs	r3, #0
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	f002 0203 	and.w	r2, r2, #3
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	4093      	lsls	r3, r2
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eaa:	4938      	ldr	r1, [pc, #224]	; (8000f8c <HAL_GPIO_Init+0x35c>)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f47f ae63 	bne.w	8000c44 <HAL_GPIO_Init+0x14>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	3724      	adds	r7, #36	; 0x24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	58000400 	.word	0x58000400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	619a      	str	r2, [r3, #24]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	041a      	lsls	r2, r3, #16
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	619a      	str	r2, [r3, #24]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00a      	beq.n	8001022 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d001      	beq.n	800101e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e01f      	b.n	800105e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e01d      	b.n	800105e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f023 0207 	bic.w	r2, r3, #7
 800102a:	490f      	ldr	r1, [pc, #60]	; (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4313      	orrs	r3, r2
 8001030:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001032:	f7ff fcdd 	bl	80009f0 <HAL_GetTick>
 8001036:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001038:	e009      	b.n	800104e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800103a:	f7ff fcd9 	bl	80009f0 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001048:	d901      	bls.n	800104e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e007      	b.n	800105e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_PWREx_ConfigSupply+0x70>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800105a:	d1ee      	bne.n	800103a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58024800 	.word	0x58024800

0800106c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff fcbc 	bl	80009f0 <HAL_GetTick>
 8001078:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e05f      	b.n	8001144 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d107      	bne.n	80010a0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fa8d 	bl	80005b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001096:	f241 3188 	movw	r1, #5000	; 0x1388
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f85a 	bl	8001154 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	021a      	lsls	r2, r3, #8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	2120      	movs	r1, #32
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f852 	bl	8001170 <QSPI_WaitFlagStateUntilTimeout>
 80010cc:	4603      	mov	r3, r0
 80010ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d135      	bne.n	8001142 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_QSPI_Init+0xe0>)
 80010de:	4013      	ands	r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6852      	ldr	r2, [r2, #4]
 80010e4:	0611      	lsls	r1, r2, #24
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68d2      	ldr	r2, [r2, #12]
 80010ea:	4311      	orrs	r1, r2
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	69d2      	ldr	r2, [r2, #28]
 80010f0:	4311      	orrs	r1, r2
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6a12      	ldr	r2, [r2, #32]
 80010f6:	4311      	orrs	r1, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_QSPI_Init+0xe4>)
 8001108:	4013      	ands	r3, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6912      	ldr	r2, [r2, #16]
 800110e:	0411      	lsls	r1, r2, #16
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6952      	ldr	r2, [r2, #20]
 8001114:	4311      	orrs	r1, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6992      	ldr	r2, [r2, #24]
 800111a:	4311      	orrs	r1, r2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	430b      	orrs	r3, r1
 8001122:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001142:	7afb      	ldrb	r3, [r7, #11]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	00ffff2f 	.word	0x00ffff2f
 8001150:	ffe0f8fe 	.word	0xffe0f8fe

08001154 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4613      	mov	r3, r2
 800117e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001180:	e01a      	b.n	80011b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d016      	beq.n	80011b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800118a:	f7ff fc31 	bl	80009f0 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	429a      	cmp	r2, r3
 8001198:	d302      	bcc.n	80011a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2204      	movs	r2, #4
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e00e      	b.n	80011d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d1d6      	bne.n	8001182 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f000 bc48 	b.w	8001a84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8088 	beq.w	8001312 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001202:	4b99      	ldr	r3, [pc, #612]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800120c:	4b96      	ldr	r3, [pc, #600]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	2b10      	cmp	r3, #16
 8001216:	d007      	beq.n	8001228 <HAL_RCC_OscConfig+0x48>
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	2b18      	cmp	r3, #24
 800121c:	d111      	bne.n	8001242 <HAL_RCC_OscConfig+0x62>
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d06d      	beq.n	8001310 <HAL_RCC_OscConfig+0x130>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d169      	bne.n	8001310 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	f000 bc21 	b.w	8001a84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x7a>
 800124c:	4b86      	ldr	r3, [pc, #536]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a85      	ldr	r2, [pc, #532]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e02e      	b.n	80012b8 <HAL_RCC_OscConfig+0xd8>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x9c>
 8001262:	4b81      	ldr	r3, [pc, #516]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a80      	ldr	r2, [pc, #512]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7d      	ldr	r2, [pc, #500]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xd8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0xc0>
 8001286:	4b78      	ldr	r3, [pc, #480]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a77      	ldr	r2, [pc, #476]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b75      	ldr	r3, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a74      	ldr	r2, [pc, #464]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xd8>
 80012a0:	4b71      	ldr	r3, [pc, #452]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a70      	ldr	r2, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a6d      	ldr	r2, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb96 	bl	80009f0 <HAL_GetTick>
 80012c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fb92 	bl	80009f0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e3d4      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xe8>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb82 	bl	80009f0 <HAL_GetTick>
 80012ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fb7e 	bl	80009f0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e3c0      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x110>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80ca 	beq.w	80014b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001320:	4b51      	ldr	r3, [pc, #324]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001328:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800132a:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_RCC_OscConfig+0x166>
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	2b18      	cmp	r3, #24
 800133a:	d156      	bne.n	80013ea <HAL_RCC_OscConfig+0x20a>
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d151      	bne.n	80013ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x17e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e392      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800135e:	4b42      	ldr	r3, [pc, #264]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 0219 	bic.w	r2, r3, #25
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	493f      	ldr	r1, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb3e 	bl	80009f0 <HAL_GetTick>
 8001374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fb3a 	bl	80009f0 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e37c      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138a:	4b37      	ldr	r3, [pc, #220]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	f7ff fb5b 	bl	8000a50 <HAL_GetREVID>
 800139a:	4603      	mov	r3, r0
 800139c:	f241 0203 	movw	r2, #4099	; 0x1003
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d817      	bhi.n	80013d4 <HAL_RCC_OscConfig+0x1f4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d108      	bne.n	80013be <HAL_RCC_OscConfig+0x1de>
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013b4:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013bc:	e07a      	b.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	031b      	lsls	r3, r3, #12
 80013cc:	4926      	ldr	r1, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d2:	e06f      	b.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	4921      	ldr	r1, [pc, #132]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e8:	e064      	b.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d047      	beq.n	8001482 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 0219 	bic.w	r2, r3, #25
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	491a      	ldr	r1, [pc, #104]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff faf4 	bl	80009f0 <HAL_GetTick>
 8001408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff faf0 	bl	80009f0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e332      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	f7ff fb11 	bl	8000a50 <HAL_GetREVID>
 800142e:	4603      	mov	r3, r0
 8001430:	f241 0203 	movw	r2, #4099	; 0x1003
 8001434:	4293      	cmp	r3, r2
 8001436:	d819      	bhi.n	800146c <HAL_RCC_OscConfig+0x28c>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b40      	cmp	r3, #64	; 0x40
 800143e:	d108      	bne.n	8001452 <HAL_RCC_OscConfig+0x272>
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 800144a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144e:	6053      	str	r3, [r2, #4]
 8001450:	e030      	b.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	031b      	lsls	r3, r3, #12
 8001460:	4901      	ldr	r1, [pc, #4]	; (8001468 <HAL_RCC_OscConfig+0x288>)
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]
 8001466:	e025      	b.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
 8001468:	58024400 	.word	0x58024400
 800146c:	4b9a      	ldr	r3, [pc, #616]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	061b      	lsls	r3, r3, #24
 800147a:	4997      	ldr	r1, [pc, #604]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
 8001480:	e018      	b.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b95      	ldr	r3, [pc, #596]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a94      	ldr	r2, [pc, #592]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff faaf 	bl	80009f0 <HAL_GetTick>
 8001492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff faab 	bl	80009f0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e2ed      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014a8:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f0      	bne.n	8001496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a9 	beq.w	8001614 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c2:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014cc:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d007      	beq.n	80014e8 <HAL_RCC_OscConfig+0x308>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b18      	cmp	r3, #24
 80014dc:	d13a      	bne.n	8001554 <HAL_RCC_OscConfig+0x374>
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d135      	bne.n	8001554 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e8:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x320>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b80      	cmp	r3, #128	; 0x80
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e2c1      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001500:	f7ff faa6 	bl	8000a50 <HAL_GetREVID>
 8001504:	4603      	mov	r3, r0
 8001506:	f241 0203 	movw	r2, #4099	; 0x1003
 800150a:	4293      	cmp	r3, r2
 800150c:	d817      	bhi.n	800153e <HAL_RCC_OscConfig+0x35e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	2b20      	cmp	r3, #32
 8001514:	d108      	bne.n	8001528 <HAL_RCC_OscConfig+0x348>
 8001516:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800151e:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001524:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001526:	e075      	b.n	8001614 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	069b      	lsls	r3, r3, #26
 8001536:	4968      	ldr	r1, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800153c:	e06a      	b.n	8001614 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800153e:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	4962      	ldr	r1, [pc, #392]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800154e:	4313      	orrs	r3, r2
 8001550:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001552:	e05f      	b.n	8001614 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d042      	beq.n	80015e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800155c:	4b5e      	ldr	r3, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a5d      	ldr	r2, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fa42 	bl	80009f0 <HAL_GetTick>
 800156c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001570:	f7ff fa3e 	bl	80009f0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e280      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001582:	4b55      	ldr	r3, [pc, #340]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800158e:	f7ff fa5f 	bl	8000a50 <HAL_GetREVID>
 8001592:	4603      	mov	r3, r0
 8001594:	f241 0203 	movw	r2, #4099	; 0x1003
 8001598:	4293      	cmp	r3, r2
 800159a:	d817      	bhi.n	80015cc <HAL_RCC_OscConfig+0x3ec>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d108      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3d6>
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80015ac:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015b2:	6053      	str	r3, [r2, #4]
 80015b4:	e02e      	b.n	8001614 <HAL_RCC_OscConfig+0x434>
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	069b      	lsls	r3, r3, #26
 80015c4:	4944      	ldr	r1, [pc, #272]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
 80015ca:	e023      	b.n	8001614 <HAL_RCC_OscConfig+0x434>
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	493f      	ldr	r1, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	60cb      	str	r3, [r1, #12]
 80015e0:	e018      	b.n	8001614 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a3c      	ldr	r2, [pc, #240]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff f9ff 	bl	80009f0 <HAL_GetTick>
 80015f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015f6:	f7ff f9fb 	bl	80009f0 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e23d      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d036      	beq.n	800168e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d019      	beq.n	800165c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162c:	4a2a      	ldr	r2, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff f9dc 	bl	80009f0 <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f9d8 	bl	80009f0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e21a      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x45c>
 800165a:	e018      	b.n	800168e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 800165e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff f9c2 	bl	80009f0 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff f9be 	bl	80009f0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e200      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b00      	cmp	r3, #0
 8001698:	d039      	beq.n	800170e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d01c      	beq.n	80016dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f99f 	bl	80009f0 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b6:	f7ff f99b 	bl	80009f0 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1dd      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4d6>
 80016d4:	e01b      	b.n	800170e <HAL_RCC_OscConfig+0x52e>
 80016d6:	bf00      	nop
 80016d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016dc:	4b9b      	ldr	r3, [pc, #620]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a9a      	ldr	r2, [pc, #616]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80016e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016e8:	f7ff f982 	bl	80009f0 <HAL_GetTick>
 80016ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f0:	f7ff f97e 	bl	80009f0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1c0      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001702:	4b92      	ldr	r3, [pc, #584]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8081 	beq.w	800181e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800171c:	4b8c      	ldr	r3, [pc, #560]	; (8001950 <HAL_RCC_OscConfig+0x770>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a8b      	ldr	r2, [pc, #556]	; (8001950 <HAL_RCC_OscConfig+0x770>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001728:	f7ff f962 	bl	80009f0 <HAL_GetTick>
 800172c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001730:	f7ff f95e 	bl	80009f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1a0      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001742:	4b83      	ldr	r3, [pc, #524]	; (8001950 <HAL_RCC_OscConfig+0x770>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d106      	bne.n	8001764 <HAL_RCC_OscConfig+0x584>
 8001756:	4b7d      	ldr	r3, [pc, #500]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a7c      	ldr	r2, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
 8001762:	e02d      	b.n	80017c0 <HAL_RCC_OscConfig+0x5e0>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10c      	bne.n	8001786 <HAL_RCC_OscConfig+0x5a6>
 800176c:	4b77      	ldr	r3, [pc, #476]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a76      	ldr	r2, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
 8001778:	4b74      	ldr	r3, [pc, #464]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	4a73      	ldr	r2, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	6713      	str	r3, [r2, #112]	; 0x70
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x5e0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c8>
 800178e:	4b6f      	ldr	r3, [pc, #444]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	4a6e      	ldr	r2, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6713      	str	r3, [r2, #112]	; 0x70
 800179a:	4b6c      	ldr	r3, [pc, #432]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a6b      	ldr	r2, [pc, #428]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x5e0>
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a67      	ldr	r2, [pc, #412]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	4a64      	ldr	r2, [pc, #400]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d015      	beq.n	80017f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff f912 	bl	80009f0 <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff f90e 	bl	80009f0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e14e      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e6:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0ee      	beq.n	80017d0 <HAL_RCC_OscConfig+0x5f0>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff f8fc 	bl	80009f0 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff f8f8 	bl	80009f0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e138      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001812:	4b4e      	ldr	r3, [pc, #312]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ee      	bne.n	80017fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 812d 	beq.w	8001a82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001830:	2b18      	cmp	r3, #24
 8001832:	f000 80bd 	beq.w	80019b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	2b02      	cmp	r3, #2
 800183c:	f040 809e 	bne.w	800197c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a41      	ldr	r2, [pc, #260]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f8d0 	bl	80009f0 <HAL_GetTick>
 8001850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f8cc 	bl	80009f0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e10e      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_OscConfig+0x774>)
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	430a      	orrs	r2, r1
 8001886:	4931      	ldr	r1, [pc, #196]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	628b      	str	r3, [r1, #40]	; 0x28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	3b01      	subs	r3, #1
 8001892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189a:	3b01      	subs	r3, #1
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	b29b      	uxth	r3, r3
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	3b01      	subs	r3, #1
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	3b01      	subs	r3, #1
 80018b6:	061b      	lsls	r3, r3, #24
 80018b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018bc:	4923      	ldr	r1, [pc, #140]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	4a21      	ldr	r2, [pc, #132]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x778>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018da:	00d2      	lsls	r2, r2, #3
 80018dc:	491b      	ldr	r1, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f023 020c 	bic.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4917      	ldr	r1, [pc, #92]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f023 0202 	bic.w	r2, r3, #2
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	4912      	ldr	r1, [pc, #72]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_RCC_OscConfig+0x76c>)
 800193c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f855 	bl	80009f0 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001948:	e011      	b.n	800196e <HAL_RCC_OscConfig+0x78e>
 800194a:	bf00      	nop
 800194c:	58024400 	.word	0x58024400
 8001950:	58024800 	.word	0x58024800
 8001954:	fffffc0c 	.word	0xfffffc0c
 8001958:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f848 	bl	80009f0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e08a      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x77c>
 800197a:	e082      	b.n	8001a82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a42      	ldr	r2, [pc, #264]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f832 	bl	80009f0 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f82e 	bl	80009f0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e070      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a2:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x7b0>
 80019ae:	e068      	b.n	8001a82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019b6:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d031      	beq.n	8001a28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f003 0203 	and.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d12a      	bne.n	8001a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d122      	bne.n	8001a28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d11a      	bne.n	8001a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0a5b      	lsrs	r3, r3, #9
 80019f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0e1b      	lsrs	r3, r3, #24
 8001a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e02b      	b.n	8001a84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d01f      	beq.n	8001a82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a4e:	f7fe ffcf 	bl	80009f0 <HAL_GetTick>
 8001a52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a54:	bf00      	nop
 8001a56:	f7fe ffcb 	bl	80009f0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d0f9      	beq.n	8001a56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_RCC_OscConfig+0x8b0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a6e:	00d2      	lsls	r2, r2, #3
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_RCC_OscConfig+0x8ac>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3730      	adds	r7, #48	; 0x30
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	ffff0007 	.word	0xffff0007

08001a94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e19c      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 020f 	bic.w	r2, r3, #15
 8001abe:	4985      	ldr	r1, [pc, #532]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e184      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d908      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001af4:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4975      	ldr	r1, [pc, #468]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d908      	bls.n	8001b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	496a      	ldr	r1, [pc, #424]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d010      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d908      	bls.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	495e      	ldr	r1, [pc, #376]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d010      	beq.n	8001b90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d908      	bls.n	8001b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b7e:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4953      	ldr	r1, [pc, #332]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d010      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d908      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f023 020f 	bic.w	r2, r3, #15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4947      	ldr	r1, [pc, #284]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d055      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4940      	ldr	r1, [pc, #256]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001be4:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d121      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0f6      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d115      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0ea      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0de      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0d6      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f023 0207 	bic.w	r2, r3, #7
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4925      	ldr	r1, [pc, #148]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c46:	f7fe fed3 	bl	80009f0 <HAL_GetTick>
 8001c4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4e:	f7fe fecf 	bl	80009f0 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0be      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d1eb      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d010      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d208      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f023 020f 	bic.w	r2, r3, #15
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d214      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	4906      	ldr	r1, [pc, #24]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e086      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
 8001cd4:	52002000 	.word	0x52002000
 8001cd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d010      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d208      	bcs.n	8001d0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	4939      	ldr	r1, [pc, #228]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d208      	bcs.n	8001d38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d26:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	492e      	ldr	r1, [pc, #184]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d208      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4922      	ldr	r1, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d010      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d208      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4917      	ldr	r1, [pc, #92]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d94:	f000 f834 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	4912      	ldr	r1, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x35c>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <HAL_RCC_ClockConfig+0x35c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x360>)
 8001dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x364>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x368>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fdc0 	bl	800095c <HAL_InitTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	58024400 	.word	0x58024400
 8001df0:	08003840 	.word	0x08003840
 8001df4:	24000004 	.word	0x24000004
 8001df8:	24000000 	.word	0x24000000
 8001dfc:	24000008 	.word	0x24000008

08001e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e06:	4bb3      	ldr	r3, [pc, #716]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	f200 8155 	bhi.w	80020be <HAL_RCC_GetSysClockFreq+0x2be>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e81 	.word	0x08001e81
 8001e20:	080020bf 	.word	0x080020bf
 8001e24:	080020bf 	.word	0x080020bf
 8001e28:	080020bf 	.word	0x080020bf
 8001e2c:	080020bf 	.word	0x080020bf
 8001e30:	080020bf 	.word	0x080020bf
 8001e34:	080020bf 	.word	0x080020bf
 8001e38:	080020bf 	.word	0x080020bf
 8001e3c:	08001ea7 	.word	0x08001ea7
 8001e40:	080020bf 	.word	0x080020bf
 8001e44:	080020bf 	.word	0x080020bf
 8001e48:	080020bf 	.word	0x080020bf
 8001e4c:	080020bf 	.word	0x080020bf
 8001e50:	080020bf 	.word	0x080020bf
 8001e54:	080020bf 	.word	0x080020bf
 8001e58:	080020bf 	.word	0x080020bf
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	080020bf 	.word	0x080020bf
 8001e64:	080020bf 	.word	0x080020bf
 8001e68:	080020bf 	.word	0x080020bf
 8001e6c:	080020bf 	.word	0x080020bf
 8001e70:	080020bf 	.word	0x080020bf
 8001e74:	080020bf 	.word	0x080020bf
 8001e78:	080020bf 	.word	0x080020bf
 8001e7c:	08001eb3 	.word	0x08001eb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e80:	4b94      	ldr	r3, [pc, #592]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e8c:	4b91      	ldr	r3, [pc, #580]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	4a90      	ldr	r2, [pc, #576]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e9e:	e111      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ea0:	4b8d      	ldr	r3, [pc, #564]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ea2:	61bb      	str	r3, [r7, #24]
      break;
 8001ea4:	e10e      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ea6:	4b8d      	ldr	r3, [pc, #564]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ea8:	61bb      	str	r3, [r7, #24]
      break;
 8001eaa:	e10b      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001eac:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001eae:	61bb      	str	r3, [r7, #24]
      break;
 8001eb0:	e108      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eb2:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ebc:	4b85      	ldr	r3, [pc, #532]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ec8:	4b82      	ldr	r3, [pc, #520]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ed2:	4b80      	ldr	r3, [pc, #512]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80e1 	beq.w	80020b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	f000 8083 	beq.w	8002004 <HAL_RCC_GetSysClockFreq+0x204>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f200 80a1 	bhi.w	8002048 <HAL_RCC_GetSysClockFreq+0x248>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x114>
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d056      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f12:	e099      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f14:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02d      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f20:	4b6c      	ldr	r3, [pc, #432]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4a:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f7a:	e087      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	eddf 6a58 	vldr	s13, [pc, #352]	; 80020e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fbe:	e065      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002002:	e043      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80020f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002026:	ed97 6a02 	vldr	s12, [r7, #8]
 800202a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800202e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800203a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002046:	e021      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002052:	eddf 6a26 	vldr	s13, [pc, #152]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8002056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800206a:	ed97 6a02 	vldr	s12, [r7, #8]
 800206e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800207a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800207e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800208a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	0a5b      	lsrs	r3, r3, #9
 8002092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002096:	3301      	adds	r3, #1
 8002098:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b0:	ee17 3a90 	vmov	r3, s15
 80020b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020c0:	61bb      	str	r3, [r7, #24]
      break;
 80020c2:	bf00      	nop
  }

  return sysclockfreq;
 80020c4:	69bb      	ldr	r3, [r7, #24]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	58024400 	.word	0x58024400
 80020d8:	03d09000 	.word	0x03d09000
 80020dc:	003d0900 	.word	0x003d0900
 80020e0:	017d7840 	.word	0x017d7840
 80020e4:	46000000 	.word	0x46000000
 80020e8:	4c742400 	.word	0x4c742400
 80020ec:	4a742400 	.word	0x4a742400
 80020f0:	4bbebc20 	.word	0x4bbebc20

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b0ca      	sub	sp, #296	; 0x128
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002106:	2300      	movs	r3, #0
 8002108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800210c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002118:	2500      	movs	r5, #0
 800211a:	ea54 0305 	orrs.w	r3, r4, r5
 800211e:	d049      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002126:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800212a:	d02f      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800212c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002130:	d828      	bhi.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002136:	d01a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800213c:	d822      	bhi.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002146:	d007      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002148:	e01c      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800214a:	4bb8      	ldr	r3, [pc, #736]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	4ab7      	ldr	r2, [pc, #732]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002156:	e01a      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800215c:	3308      	adds	r3, #8
 800215e:	2102      	movs	r1, #2
 8002160:	4618      	mov	r0, r3
 8002162:	f001 f9d1 	bl	8003508 <RCCEx_PLL2_Config>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800216c:	e00f      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800216e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002172:	3328      	adds	r3, #40	; 0x28
 8002174:	2102      	movs	r1, #2
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fa78 	bl	800366c <RCCEx_PLL3_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002182:	e004      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800218a:	e000      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800218c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800218e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002196:	4ba5      	ldr	r3, [pc, #660]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800219e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a4:	4aa1      	ldr	r2, [pc, #644]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021a6:	430b      	orrs	r3, r1
 80021a8:	6513      	str	r3, [r2, #80]	; 0x50
 80021aa:	e003      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80021b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80021c0:	f04f 0900 	mov.w	r9, #0
 80021c4:	ea58 0309 	orrs.w	r3, r8, r9
 80021c8:	d047      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80021ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d82a      	bhi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	080021f1 	.word	0x080021f1
 80021e0:	080021ff 	.word	0x080021ff
 80021e4:	08002215 	.word	0x08002215
 80021e8:	08002233 	.word	0x08002233
 80021ec:	08002233 	.word	0x08002233
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021f0:	4b8e      	ldr	r3, [pc, #568]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	4a8d      	ldr	r2, [pc, #564]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021fc:	e01a      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002202:	3308      	adds	r3, #8
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f97e 	bl	8003508 <RCCEx_PLL2_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002212:	e00f      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002218:	3328      	adds	r3, #40	; 0x28
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fa25 	bl	800366c <RCCEx_PLL3_Config>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002228:	e004      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002230:	e000      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002240:	f023 0107 	bic.w	r1, r3, #7
 8002244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	4a78      	ldr	r2, [pc, #480]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800224c:	430b      	orrs	r3, r1
 800224e:	6513      	str	r3, [r2, #80]	; 0x50
 8002250:	e003      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800225a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002266:	f04f 0b00 	mov.w	fp, #0
 800226a:	ea5a 030b 	orrs.w	r3, sl, fp
 800226e:	d04c      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227a:	d030      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d829      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002282:	2bc0      	cmp	r3, #192	; 0xc0
 8002284:	d02d      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002286:	2bc0      	cmp	r3, #192	; 0xc0
 8002288:	d825      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d018      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	d821      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d007      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800229a:	e01c      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800229c:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	4a62      	ldr	r2, [pc, #392]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022a8:	e01c      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022ae:	3308      	adds	r3, #8
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 f928 	bl	8003508 <RCCEx_PLL2_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022be:	e011      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022c4:	3328      	adds	r3, #40	; 0x28
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 f9cf 	bl	800366c <RCCEx_PLL3_Config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022d4:	e006      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80022dc:	e002      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80022e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80022f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	4a4c      	ldr	r2, [pc, #304]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6513      	str	r3, [r2, #80]	; 0x50
 8002300:	e003      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800230a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002316:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002320:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002324:	460b      	mov	r3, r1
 8002326:	4313      	orrs	r3, r2
 8002328:	d053      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800232a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800232e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002332:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002336:	d035      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800233c:	d82e      	bhi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800233e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002342:	d031      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002344:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002348:	d828      	bhi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800234a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234e:	d01a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002354:	d822      	bhi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800235a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800235e:	d007      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002360:	e01c      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002362:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	4a31      	ldr	r2, [pc, #196]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800236e:	e01c      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002374:	3308      	adds	r3, #8
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f001 f8c5 	bl	8003508 <RCCEx_PLL2_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002384:	e011      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800238a:	3328      	adds	r3, #40	; 0x28
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f001 f96c 	bl	800366c <RCCEx_PLL3_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800239a:	e006      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80023a2:	e002      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80023a4:	bf00      	nop
 80023a6:	e000      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80023a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10b      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80023ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80023c2:	4a1a      	ldr	r2, [pc, #104]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6593      	str	r3, [r2, #88]	; 0x58
 80023c8:	e003      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80023de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80023ec:	460b      	mov	r3, r1
 80023ee:	4313      	orrs	r3, r2
 80023f0:	d056      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80023f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80023fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023fe:	d038      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002404:	d831      	bhi.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002406:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800240a:	d034      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800240c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002410:	d82b      	bhi.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002416:	d01d      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800241c:	d825      	bhi.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002422:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002428:	e01f      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800242a:	bf00      	nop
 800242c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002430:	4ba2      	ldr	r3, [pc, #648]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	4aa1      	ldr	r2, [pc, #644]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800243c:	e01c      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800243e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002442:	3308      	adds	r3, #8
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f001 f85e 	bl	8003508 <RCCEx_PLL2_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002452:	e011      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002458:	3328      	adds	r3, #40	; 0x28
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f001 f905 	bl	800366c <RCCEx_PLL3_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002468:	e006      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002470:	e002      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002480:	4b8e      	ldr	r3, [pc, #568]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800248c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002490:	4a8a      	ldr	r2, [pc, #552]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002492:	430b      	orrs	r3, r1
 8002494:	6593      	str	r3, [r2, #88]	; 0x58
 8002496:	e003      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800249c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80024ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80024b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80024ba:	460b      	mov	r3, r1
 80024bc:	4313      	orrs	r3, r2
 80024be:	d03a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80024c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	2b30      	cmp	r3, #48	; 0x30
 80024c8:	d01f      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80024ca:	2b30      	cmp	r3, #48	; 0x30
 80024cc:	d819      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d00c      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d815      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d111      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024de:	4b77      	ldr	r3, [pc, #476]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	4a76      	ldr	r2, [pc, #472]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80024ea:	e011      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024f0:	3308      	adds	r3, #8
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f807 	bl	8003508 <RCCEx_PLL2_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002500:	e006      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002508:	e002      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800250e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	4a65      	ldr	r2, [pc, #404]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002528:	430b      	orrs	r3, r1
 800252a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252c:	e003      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002542:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800254c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002550:	460b      	mov	r3, r1
 8002552:	4313      	orrs	r3, r2
 8002554:	d051      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800255a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002560:	d035      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002566:	d82e      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002568:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800256c:	d031      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800256e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002572:	d828      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	d01a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800257a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257e:	d822      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002588:	d007      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800258a:	e01c      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800258c:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002598:	e01c      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800259a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800259e:	3308      	adds	r3, #8
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 ffb0 	bl	8003508 <RCCEx_PLL2_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025ae:	e011      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025b4:	3328      	adds	r3, #40	; 0x28
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 f857 	bl	800366c <RCCEx_PLL3_Config>
 80025be:	4603      	mov	r3, r0
 80025c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025c4:	e006      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80025dc:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80025e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6513      	str	r3, [r2, #80]	; 0x50
 80025f0:	e003      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80025fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002610:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002614:	460b      	mov	r3, r1
 8002616:	4313      	orrs	r3, r2
 8002618:	d056      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800261a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800261e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002624:	d033      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800262a:	d82c      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800262c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002630:	d02f      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002632:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002636:	d826      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800263c:	d02b      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800263e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002642:	d820      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002648:	d012      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800264a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800264e:	d81a      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d022      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d115      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800265a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800265e:	3308      	adds	r3, #8
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f000 ff50 	bl	8003508 <RCCEx_PLL2_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800266e:	e015      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002674:	3328      	adds	r3, #40	; 0x28
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fff7 	bl	800366c <RCCEx_PLL3_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002684:	e00a      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800268c:	e006      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800268e:	bf00      	nop
 8002690:	e004      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800269a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800269c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80026ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b2:	4a02      	ldr	r2, [pc, #8]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6513      	str	r3, [r2, #80]	; 0x50
 80026b8:	e006      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80026ba:	bf00      	nop
 80026bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80026d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4313      	orrs	r3, r2
 80026e6:	d055      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f4:	d033      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80026f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026fa:	d82c      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d02f      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002706:	d826      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800270c:	d02b      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800270e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002712:	d820      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002718:	d012      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800271a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271e:	d81a      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d022      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002728:	d115      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800272a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800272e:	3308      	adds	r3, #8
 8002730:	2101      	movs	r1, #1
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fee8 	bl	8003508 <RCCEx_PLL2_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800273e:	e015      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002744:	3328      	adds	r3, #40	; 0x28
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 ff8f 	bl	800366c <RCCEx_PLL3_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002754:	e00a      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800275c:	e006      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800275e:	bf00      	nop
 8002760:	e004      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800276a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800276c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10b      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002774:	4ba3      	ldr	r3, [pc, #652]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800277c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002784:	4a9f      	ldr	r2, [pc, #636]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002786:	430b      	orrs	r3, r1
 8002788:	6593      	str	r3, [r2, #88]	; 0x58
 800278a:	e003      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002790:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80027a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80027aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027ae:	460b      	mov	r3, r1
 80027b0:	4313      	orrs	r3, r2
 80027b2:	d037      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80027b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027be:	d00e      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80027c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c4:	d816      	bhi.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d018      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80027ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ce:	d111      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d0:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	4a8b      	ldr	r2, [pc, #556]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80027dc:	e00f      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e2:	3308      	adds	r3, #8
 80027e4:	2101      	movs	r1, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fe8e 	bl	8003508 <RCCEx_PLL2_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80027f2:	e004      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027fa:	e000      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80027fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002806:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800280e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a7b      	ldr	r2, [pc, #492]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002816:	430b      	orrs	r3, r1
 8002818:	6513      	str	r3, [r2, #80]	; 0x50
 800281a:	e003      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800283a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800283e:	460b      	mov	r3, r1
 8002840:	4313      	orrs	r3, r2
 8002842:	d039      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284a:	2b03      	cmp	r3, #3
 800284c:	d81c      	bhi.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	08002891 	.word	0x08002891
 8002858:	08002865 	.word	0x08002865
 800285c:	08002873 	.word	0x08002873
 8002860:	08002891 	.word	0x08002891
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002864:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	4a66      	ldr	r2, [pc, #408]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800286a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002870:	e00f      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002876:	3308      	adds	r3, #8
 8002878:	2102      	movs	r1, #2
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fe44 	bl	8003508 <RCCEx_PLL2_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002886:	e004      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800288e:	e000      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800289a:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	f023 0103 	bic.w	r1, r3, #3
 80028a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a8:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028aa:	430b      	orrs	r3, r1
 80028ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ae:	e003      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80028c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80028d2:	460b      	mov	r3, r1
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f000 809f 	beq.w	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e6:	f7fe f883 	bl	80009f0 <HAL_GetTick>
 80028ea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ee:	e00b      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe f87e 	bl	80009f0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d903      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002906:	e005      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002908:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ed      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002918:	2b00      	cmp	r3, #0
 800291a:	d179      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800291e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002924:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002928:	4053      	eors	r3, r2
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	2b00      	cmp	r3, #0
 8002930:	d015      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a2d      	ldr	r2, [pc, #180]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002956:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002958:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800295e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d118      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe f840 	bl	80009f0 <HAL_GetTick>
 8002970:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002974:	e00d      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe f83b 	bl	80009f0 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	f241 3388 	movw	r3, #5000	; 0x1388
 8002986:	429a      	cmp	r2, r3
 8002988:	d903      	bls.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002990:	e005      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0eb      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800299e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d129      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029b6:	d10e      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80029c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029c8:	091a      	lsrs	r2, r3, #4
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6113      	str	r3, [r2, #16]
 80029d4:	e005      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029e0:	6113      	str	r3, [r2, #16]
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80029e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e00e      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002a02:	e009      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002a04:	58024400 	.word	0x58024400
 8002a08:	58024800 	.word	0x58024800
 8002a0c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f002 0301 	and.w	r3, r2, #1
 8002a24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f000 8089 	beq.w	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a40:	2b28      	cmp	r3, #40	; 0x28
 8002a42:	d86b      	bhi.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002b25 	.word	0x08002b25
 8002a50:	08002b1d 	.word	0x08002b1d
 8002a54:	08002b1d 	.word	0x08002b1d
 8002a58:	08002b1d 	.word	0x08002b1d
 8002a5c:	08002b1d 	.word	0x08002b1d
 8002a60:	08002b1d 	.word	0x08002b1d
 8002a64:	08002b1d 	.word	0x08002b1d
 8002a68:	08002b1d 	.word	0x08002b1d
 8002a6c:	08002af1 	.word	0x08002af1
 8002a70:	08002b1d 	.word	0x08002b1d
 8002a74:	08002b1d 	.word	0x08002b1d
 8002a78:	08002b1d 	.word	0x08002b1d
 8002a7c:	08002b1d 	.word	0x08002b1d
 8002a80:	08002b1d 	.word	0x08002b1d
 8002a84:	08002b1d 	.word	0x08002b1d
 8002a88:	08002b1d 	.word	0x08002b1d
 8002a8c:	08002b07 	.word	0x08002b07
 8002a90:	08002b1d 	.word	0x08002b1d
 8002a94:	08002b1d 	.word	0x08002b1d
 8002a98:	08002b1d 	.word	0x08002b1d
 8002a9c:	08002b1d 	.word	0x08002b1d
 8002aa0:	08002b1d 	.word	0x08002b1d
 8002aa4:	08002b1d 	.word	0x08002b1d
 8002aa8:	08002b1d 	.word	0x08002b1d
 8002aac:	08002b25 	.word	0x08002b25
 8002ab0:	08002b1d 	.word	0x08002b1d
 8002ab4:	08002b1d 	.word	0x08002b1d
 8002ab8:	08002b1d 	.word	0x08002b1d
 8002abc:	08002b1d 	.word	0x08002b1d
 8002ac0:	08002b1d 	.word	0x08002b1d
 8002ac4:	08002b1d 	.word	0x08002b1d
 8002ac8:	08002b1d 	.word	0x08002b1d
 8002acc:	08002b25 	.word	0x08002b25
 8002ad0:	08002b1d 	.word	0x08002b1d
 8002ad4:	08002b1d 	.word	0x08002b1d
 8002ad8:	08002b1d 	.word	0x08002b1d
 8002adc:	08002b1d 	.word	0x08002b1d
 8002ae0:	08002b1d 	.word	0x08002b1d
 8002ae4:	08002b1d 	.word	0x08002b1d
 8002ae8:	08002b1d 	.word	0x08002b1d
 8002aec:	08002b25 	.word	0x08002b25
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af4:	3308      	adds	r3, #8
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fd05 	bl	8003508 <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b04:	e00f      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b0a:	3328      	adds	r3, #40	; 0x28
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fdac 	bl	800366c <RCCEx_PLL3_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b1a:	e004      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b22:	e000      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b2e:	4bbf      	ldr	r3, [pc, #764]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3c:	4abb      	ldr	r2, [pc, #748]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6553      	str	r3, [r2, #84]	; 0x54
 8002b42:	e003      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f002 0302 	and.w	r3, r2, #2
 8002b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002b66:	460b      	mov	r3, r1
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	d041      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d824      	bhi.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002bc9 	.word	0x08002bc9
 8002b80:	08002b95 	.word	0x08002b95
 8002b84:	08002bab 	.word	0x08002bab
 8002b88:	08002bc9 	.word	0x08002bc9
 8002b8c:	08002bc9 	.word	0x08002bc9
 8002b90:	08002bc9 	.word	0x08002bc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b98:	3308      	adds	r3, #8
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fcb3 	bl	8003508 <RCCEx_PLL2_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ba8:	e00f      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bae:	3328      	adds	r3, #40	; 0x28
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fd5a 	bl	800366c <RCCEx_PLL3_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002bbe:	e004      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bd2:	4b96      	ldr	r3, [pc, #600]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f023 0107 	bic.w	r1, r3, #7
 8002bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be0:	4a92      	ldr	r2, [pc, #584]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6553      	str	r3, [r2, #84]	; 0x54
 8002be6:	e003      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f002 0304 	and.w	r3, r2, #4
 8002bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	d044      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d825      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c71 	.word	0x08002c71
 8002c28:	08002c3d 	.word	0x08002c3d
 8002c2c:	08002c53 	.word	0x08002c53
 8002c30:	08002c71 	.word	0x08002c71
 8002c34:	08002c71 	.word	0x08002c71
 8002c38:	08002c71 	.word	0x08002c71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c40:	3308      	adds	r3, #8
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fc5f 	bl	8003508 <RCCEx_PLL2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c50:	e00f      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c56:	3328      	adds	r3, #40	; 0x28
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fd06 	bl	800366c <RCCEx_PLL3_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c66:	e004      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c6e:	e000      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	f023 0107 	bic.w	r1, r3, #7
 8002c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	4a68      	ldr	r2, [pc, #416]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f002 0320 	and.w	r3, r2, #32
 8002ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	d055      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc6:	d033      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ccc:	d82c      	bhi.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd2:	d02f      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d826      	bhi.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002cda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cde:	d02b      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ce4:	d820      	bhi.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cea:	d012      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf0:	d81a      	bhi.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d022      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfa:	d115      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d00:	3308      	adds	r3, #8
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fbff 	bl	8003508 <RCCEx_PLL2_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d10:	e015      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d16:	3328      	adds	r3, #40	; 0x28
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fca6 	bl	800366c <RCCEx_PLL3_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d26:	e00a      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d2e:	e006      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d30:	bf00      	nop
 8002d32:	e004      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d34:	bf00      	nop
 8002d36:	e002      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	4a35      	ldr	r2, [pc, #212]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	6553      	str	r3, [r2, #84]	; 0x54
 8002d5c:	e003      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4313      	orrs	r3, r2
 8002d84:	d058      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d92:	d033      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002d94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d98:	d82c      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9e:	d02f      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d826      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002daa:	d02b      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002db0:	d820      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db6:	d012      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbc:	d81a      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d022      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d115      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dcc:	3308      	adds	r3, #8
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fb99 	bl	8003508 <RCCEx_PLL2_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002ddc:	e015      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de2:	3328      	adds	r3, #40	; 0x28
 8002de4:	2102      	movs	r1, #2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fc40 	bl	800366c <RCCEx_PLL3_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002df2:	e00a      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dfa:	e006      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002dfc:	bf00      	nop
 8002dfe:	e004      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e00:	bf00      	nop
 8002e02:	e002      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10e      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e22:	4a02      	ldr	r2, [pc, #8]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6593      	str	r3, [r2, #88]	; 0x58
 8002e28:	e006      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002e2a:	bf00      	nop
 8002e2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002e52:	460b      	mov	r3, r1
 8002e54:	4313      	orrs	r3, r2
 8002e56:	d055      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e64:	d033      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002e66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e6a:	d82c      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d02f      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e76:	d826      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e7c:	d02b      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002e7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e82:	d820      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e88:	d012      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e8e:	d81a      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d022      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e98:	d115      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fb30 	bl	8003508 <RCCEx_PLL2_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002eae:	e015      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb4:	3328      	adds	r3, #40	; 0x28
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fbd7 	bl	800366c <RCCEx_PLL3_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002ec4:	e00a      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ecc:	e006      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002ece:	bf00      	nop
 8002ed0:	e004      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002edc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002ee4:	4ba1      	ldr	r3, [pc, #644]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ef4:	4a9d      	ldr	r2, [pc, #628]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8002efa:	e003      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f002 0308 	and.w	r3, r2, #8
 8002f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4313      	orrs	r3, r2
 8002f22:	d01e      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f36:	3328      	adds	r3, #40	; 0x28
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fb96 	bl	800366c <RCCEx_PLL3_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f4c:	4b87      	ldr	r3, [pc, #540]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5c:	4a83      	ldr	r2, [pc, #524]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f002 0310 	and.w	r3, r2, #16
 8002f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	d01e      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8e:	d10c      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f94:	3328      	adds	r3, #40	; 0x28
 8002f96:	2102      	movs	r1, #2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fb67 	bl	800366c <RCCEx_PLL3_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fba:	4a6c      	ldr	r2, [pc, #432]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	d03e      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fec:	d022      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff2:	d81b      	bhi.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002ffe:	e015      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003004:	3308      	adds	r3, #8
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fa7d 	bl	8003508 <RCCEx_PLL2_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003014:	e00f      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301a:	3328      	adds	r3, #40	; 0x28
 800301c:	2102      	movs	r1, #2
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fb24 	bl	800366c <RCCEx_PLL3_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800303e:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800304e:	4a47      	ldr	r2, [pc, #284]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003050:	430b      	orrs	r3, r1
 8003052:	6593      	str	r3, [r2, #88]	; 0x58
 8003054:	e003      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800305a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800305e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800306a:	67bb      	str	r3, [r7, #120]	; 0x78
 800306c:	2300      	movs	r3, #0
 800306e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003070:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003074:	460b      	mov	r3, r1
 8003076:	4313      	orrs	r3, r2
 8003078:	d03b      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003086:	d01f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003088:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800308c:	d818      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800308e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003092:	d003      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003098:	d007      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800309a:	e011      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309c:	4b33      	ldr	r3, [pc, #204]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	4a32      	ldr	r2, [pc, #200]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80030a8:	e00f      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ae:	3328      	adds	r3, #40	; 0x28
 80030b0:	2101      	movs	r1, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fada 	bl	800366c <RCCEx_PLL3_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80030be:	e004      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030c6:	e000      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80030c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6553      	str	r3, [r2, #84]	; 0x54
 80030e8:	e003      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80030fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003100:	2300      	movs	r3, #0
 8003102:	677b      	str	r3, [r7, #116]	; 0x74
 8003104:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003108:	460b      	mov	r3, r1
 800310a:	4313      	orrs	r3, r2
 800310c:	d034      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d007      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800311e:	e011      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4a11      	ldr	r2, [pc, #68]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800312c:	e00e      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003132:	3308      	adds	r3, #8
 8003134:	2102      	movs	r1, #2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f9e6 	bl	8003508 <RCCEx_PLL2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003142:	e003      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800314a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10d      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	4a02      	ldr	r2, [pc, #8]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003164:	430b      	orrs	r3, r1
 8003166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003184:	66bb      	str	r3, [r7, #104]	; 0x68
 8003186:	2300      	movs	r3, #0
 8003188:	66fb      	str	r3, [r7, #108]	; 0x6c
 800318a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800318e:	460b      	mov	r3, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	d00c      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003198:	3328      	adds	r3, #40	; 0x28
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fa65 	bl	800366c <RCCEx_PLL3_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80031ba:	663b      	str	r3, [r7, #96]	; 0x60
 80031bc:	2300      	movs	r3, #0
 80031be:	667b      	str	r3, [r7, #100]	; 0x64
 80031c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80031c4:	460b      	mov	r3, r1
 80031c6:	4313      	orrs	r3, r2
 80031c8:	d038      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80031ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d6:	d018      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80031d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031dc:	d811      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80031de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e2:	d014      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80031e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e8:	d80b      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d011      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	d106      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f4:	4bc3      	ldr	r3, [pc, #780]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4ac2      	ldr	r2, [pc, #776]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003200:	e008      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003208:	e004      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800321c:	4bb9      	ldr	r3, [pc, #740]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322c:	4ab5      	ldr	r2, [pc, #724]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800322e:	430b      	orrs	r3, r1
 8003230:	6553      	str	r3, [r2, #84]	; 0x54
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003248:	65bb      	str	r3, [r7, #88]	; 0x58
 800324a:	2300      	movs	r3, #0
 800324c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800324e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003252:	460b      	mov	r3, r1
 8003254:	4313      	orrs	r3, r2
 8003256:	d009      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003258:	4baa      	ldr	r3, [pc, #680]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	4aa7      	ldr	r2, [pc, #668]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003268:	430b      	orrs	r3, r1
 800326a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003278:	653b      	str	r3, [r7, #80]	; 0x50
 800327a:	2300      	movs	r3, #0
 800327c:	657b      	str	r3, [r7, #84]	; 0x54
 800327e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003282:	460b      	mov	r3, r1
 8003284:	4313      	orrs	r3, r2
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003288:	4b9e      	ldr	r3, [pc, #632]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003294:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003298:	4a9a      	ldr	r2, [pc, #616]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800329a:	430b      	orrs	r3, r1
 800329c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80032aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ac:	2300      	movs	r3, #0
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80032b4:	460b      	mov	r3, r1
 80032b6:	4313      	orrs	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ba:	4b92      	ldr	r3, [pc, #584]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c8:	4a8e      	ldr	r2, [pc, #568]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032ca:	430b      	orrs	r3, r1
 80032cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80032da:	643b      	str	r3, [r7, #64]	; 0x40
 80032dc:	2300      	movs	r3, #0
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
 80032e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d00e      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032ea:	4b86      	ldr	r3, [pc, #536]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	4a85      	ldr	r2, [pc, #532]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032f4:	6113      	str	r3, [r2, #16]
 80032f6:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003302:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003304:	430b      	orrs	r3, r1
 8003306:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
 8003316:	2300      	movs	r3, #0
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800331e:	460b      	mov	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	d009      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003324:	4b77      	ldr	r3, [pc, #476]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	4a74      	ldr	r2, [pc, #464]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003334:	430b      	orrs	r3, r1
 8003336:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003344:	633b      	str	r3, [r7, #48]	; 0x30
 8003346:	2300      	movs	r3, #0
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
 800334a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800334e:	460b      	mov	r3, r1
 8003350:	4313      	orrs	r3, r2
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003354:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003364:	4a67      	ldr	r2, [pc, #412]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003366:	430b      	orrs	r3, r1
 8003368:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	2100      	movs	r1, #0
 8003374:	62b9      	str	r1, [r7, #40]	; 0x28
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003380:	460b      	mov	r3, r1
 8003382:	4313      	orrs	r3, r2
 8003384:	d011      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338a:	3308      	adds	r3, #8
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f8ba 	bl	8003508 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800339a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	2100      	movs	r1, #0
 80033b4:	6239      	str	r1, [r7, #32]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
 80033bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033c0:	460b      	mov	r3, r1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	d011      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	3308      	adds	r3, #8
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f89a 	bl	8003508 <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80033da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	2100      	movs	r1, #0
 80033f4:	61b9      	str	r1, [r7, #24]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003400:	460b      	mov	r3, r1
 8003402:	4313      	orrs	r3, r2
 8003404:	d011      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340a:	3308      	adds	r3, #8
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f87a 	bl	8003508 <RCCEx_PLL2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800341a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	2100      	movs	r1, #0
 8003434:	6139      	str	r1, [r7, #16]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d011      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344a:	3328      	adds	r3, #40	; 0x28
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f90c 	bl	800366c <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800345a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	2100      	movs	r1, #0
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003480:	460b      	mov	r3, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	d011      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348a:	3328      	adds	r3, #40	; 0x28
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f8ec 	bl	800366c <RCCEx_PLL3_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800349a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	2100      	movs	r1, #0
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d011      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ca:	3328      	adds	r3, #40	; 0x28
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f8cc 	bl	800366c <RCCEx_PLL3_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80034da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80034ea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80034fe:	46bd      	mov	sp, r7
 8003500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003504:	58024400 	.word	0x58024400

08003508 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003516:	4b53      	ldr	r3, [pc, #332]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b03      	cmp	r3, #3
 8003520:	d101      	bne.n	8003526 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e099      	b.n	800365a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003526:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800352c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003532:	f7fd fa5d 	bl	80009f0 <HAL_GetTick>
 8003536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003538:	e008      	b.n	800354c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800353a:	f7fd fa59 	bl	80009f0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e086      	b.n	800365a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800354c:	4b45      	ldr	r3, [pc, #276]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	031b      	lsls	r3, r3, #12
 8003566:	493f      	ldr	r1, [pc, #252]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	628b      	str	r3, [r1, #40]	; 0x28
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	3b01      	subs	r3, #1
 8003572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	3b01      	subs	r3, #1
 800357c:	025b      	lsls	r3, r3, #9
 800357e:	b29b      	uxth	r3, r3
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	3b01      	subs	r3, #1
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	3b01      	subs	r3, #1
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800359c:	4931      	ldr	r1, [pc, #196]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80035a2:	4b30      	ldr	r3, [pc, #192]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	492d      	ldr	r1, [pc, #180]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	f023 0220 	bic.w	r2, r3, #32
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4928      	ldr	r1, [pc, #160]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035c6:	4b27      	ldr	r3, [pc, #156]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035cc:	f023 0310 	bic.w	r3, r3, #16
 80035d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <RCCEx_PLL2_Config+0x160>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	69d2      	ldr	r2, [r2, #28]
 80035de:	00d2      	lsls	r2, r2, #3
 80035e0:	4920      	ldr	r1, [pc, #128]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035e6:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035ec:	f043 0310 	orr.w	r3, r3, #16
 80035f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 80035fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003604:	e00f      	b.n	8003626 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800360c:	4b15      	ldr	r3, [pc, #84]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003618:	e005      	b.n	8003626 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a11      	ldr	r2, [pc, #68]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 8003620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800362c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fd f9dd 	bl	80009f0 <HAL_GetTick>
 8003636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003638:	e008      	b.n	800364c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800363a:	f7fd f9d9 	bl	80009f0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e006      	b.n	800365a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <RCCEx_PLL2_Config+0x15c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
 8003668:	ffff0007 	.word	0xffff0007

0800366c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800367a:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d101      	bne.n	800368a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e099      	b.n	80037be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800368a:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fd f9ab 	bl	80009f0 <HAL_GetTick>
 800369a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800369c:	e008      	b.n	80036b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800369e:	f7fd f9a7 	bl	80009f0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e086      	b.n	80037be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036b0:	4b45      	ldr	r3, [pc, #276]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036bc:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	051b      	lsls	r3, r3, #20
 80036ca:	493f      	ldr	r1, [pc, #252]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	628b      	str	r3, [r1, #40]	; 0x28
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	3b01      	subs	r3, #1
 80036e0:	025b      	lsls	r3, r3, #9
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	061b      	lsls	r3, r3, #24
 80036fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003700:	4931      	ldr	r1, [pc, #196]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003706:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	492d      	ldr	r1, [pc, #180]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	4928      	ldr	r1, [pc, #160]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <RCCEx_PLL3_Config+0x160>)
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	69d2      	ldr	r2, [r2, #28]
 8003742:	00d2      	lsls	r2, r2, #3
 8003744:	4920      	ldr	r1, [pc, #128]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003746:	4313      	orrs	r3, r2
 8003748:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	4a19      	ldr	r2, [pc, #100]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003768:	e00f      	b.n	800378a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003776:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800377c:	e005      	b.n	800378a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003796:	f7fd f92b 	bl	80009f0 <HAL_GetTick>
 800379a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800379c:	e008      	b.n	80037b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800379e:	f7fd f927 	bl	80009f0 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e006      	b.n	80037be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <RCCEx_PLL3_Config+0x15c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
 80037cc:	ffff0007 	.word	0xffff0007

080037d0 <memset>:
 80037d0:	4402      	add	r2, r0
 80037d2:	4603      	mov	r3, r0
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d100      	bne.n	80037da <memset+0xa>
 80037d8:	4770      	bx	lr
 80037da:	f803 1b01 	strb.w	r1, [r3], #1
 80037de:	e7f9      	b.n	80037d4 <memset+0x4>

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	4d0d      	ldr	r5, [pc, #52]	; (8003818 <__libc_init_array+0x38>)
 80037e4:	4c0d      	ldr	r4, [pc, #52]	; (800381c <__libc_init_array+0x3c>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	2600      	movs	r6, #0
 80037ec:	42a6      	cmp	r6, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	4d0b      	ldr	r5, [pc, #44]	; (8003820 <__libc_init_array+0x40>)
 80037f2:	4c0c      	ldr	r4, [pc, #48]	; (8003824 <__libc_init_array+0x44>)
 80037f4:	f000 f818 	bl	8003828 <_init>
 80037f8:	1b64      	subs	r4, r4, r5
 80037fa:	10a4      	asrs	r4, r4, #2
 80037fc:	2600      	movs	r6, #0
 80037fe:	42a6      	cmp	r6, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	f855 3b04 	ldr.w	r3, [r5], #4
 8003808:	4798      	blx	r3
 800380a:	3601      	adds	r6, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003812:	4798      	blx	r3
 8003814:	3601      	adds	r6, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	08003850 	.word	0x08003850
 800381c:	08003850 	.word	0x08003850
 8003820:	08003850 	.word	0x08003850
 8003824:	08003854 	.word	0x08003854

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr
